"use strict";(self.webpackChunk_pdfme_website=self.webpackChunk_pdfme_website||[]).push([[385],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var f=a.createContext({}),l=function(e){var t=a.useContext(f),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(f.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,f=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,m=p["".concat(f,".").concat(d)]||p[d]||c[d]||o;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var i={};for(var f in t)hasOwnProperty.call(t,f)&&(i[f]=t[f]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},99427:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={},s="Custom Fonts",i={unversionedId:"guides/custom-fonts",id:"guides/custom-fonts",title:"Custom Fonts",description:"pdfme uses the helvetica font by default, but you can use any font you like.",source:"@site/docs/guides/custom-fonts.md",sourceDirName:"guides",slug:"/guides/custom-fonts",permalink:"/docs/guides/custom-fonts",draft:!1,editUrl:"https://github.com/pdfme/pdfme/tree/main/website/docs/guides/custom-fonts.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"About Tables with Dynamic Data",permalink:"/docs/guides/tables"}},f={},l=[{value:"About Font type",id:"about-font-type",level:2},{value:"How to set font",id:"how-to-set-font",level:2},{value:"Generator",id:"generator",level:3},{value:"UI",id:"ui",level:3},{value:"Setting font at instance initialization",id:"setting-font-at-instance-initialization",level:4},{value:"Update fonts with <code>updateOptions</code>.",id:"update-fonts-with-updateoptions",level:4}],u={toc:l};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-fonts"},"Custom Fonts"),(0,r.kt)("p",null,"pdfme uses the helvetica font by default, but you can use any font you like."),(0,r.kt)("h2",{id:"about-font-type"},"About Font type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type Font = {\n  [fontName: string]: {\n    data: Uint8Array | ArrayBuffer;\n    fallback?: boolean;\n    subset?: boolean;\n  };\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"*",(0,r.kt)("inlineCode",{parentName:"li"},"fallback"),": Setting it to true makes it the font to use if not set to a ",(0,r.kt)("inlineCode",{parentName:"li"},"fontName"),". Only one of the font objects must be set to true."),(0,r.kt)("li",{parentName:"ul"},"*",(0,r.kt)("inlineCode",{parentName:"li"},"subset"),": The default is true, but it can be set to false to set the font embedding to not subset. (This setting is for a bug in fontkit when embedding certain fonts with subsetting.)")),(0,r.kt)("p",null,"Please read font data by fetch or fs.readFileSync as below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const font: Font = {\n  serif: {\n    data: await fetch('fonts/serif.ttf').then((res) => res.arrayBuffer()),\n    fallback: true,\n  },\n  sans_serif: {\n    data: fs.readFileSync(\"fonts/sans_serif.ttf\"),\n  },\n};\n")),(0,r.kt)("h2",{id:"how-to-set-font"},"How to set font"),(0,r.kt)("p",null,"Let's check out how to set font in the generator and ui packages."),(0,r.kt)("h3",{id:"generator"},"Generator"),(0,r.kt)("p",null,"Set font as option in ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started#generator"},"generate")," function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Template, BLANK_PDF, generate } from '@pdfme/generator';\n\nconst font = {\n  serif: {\n    data: await fetch('fonts/serif.ttf').then((res) => res.arrayBuffer()),\n    fallback: true,\n  },\n  sans_serif: {\n    data: fs.readFileSync(\"fonts/sans_serif.ttf\"),\n  },\n}\nconst template: Template = {\n  basePdf: BLANK_PDF,\n  schemas: [\n    {\n      a: {\n        type: 'text',\n        fontName: 'serif',\n        position: { x: 0, y: 0 },\n        width: 10, height: 10,\n      },\n      b: {\n        type: 'text',\n        fontName: 'sans_serif',\n        position: { x: 10, y: 10 },\n        width: 10, height: 10,\n      },\n      c: { // <- use fallback font. (serif)\n        type: 'text',\n        position: { x: 20, y: 20 },\n        width: 10, height: 10,\n      },\n    },\n  ],\n};\nconst inputs = [{ a: 'a1', b: 'b1', c: 'c1' }];\n\n\ngenerate({ template, inputs, options: { font } }).then((pdf) => {\n  console.log(pdf);\n\n  // Browser\n  // const blob = new Blob([pdf.buffer], { type: 'application/pdf' });\n  // window.open(URL.createObjectURL(blob));\n\n  // Node.js\n  // fs.writeFileSync(path.join(__dirname, `test.pdf`), pdf);\n});\n")),(0,r.kt)("h3",{id:"ui"},"UI"),(0,r.kt)("p",null,"There are two ways to set fonts in the UI. instance initialization and through method.",(0,r.kt)("br",{parentName:"p"}),"\n","The sample code is for ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started#designer"},"Designer"),", but the same way can be used for ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started#form"},"Form")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started#viewer"},"Viewer"),"."),(0,r.kt)("h4",{id:"setting-font-at-instance-initialization"},"Setting font at instance initialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Designer } from \"@pdfme/ui\";\n\nconst domContainer = document.getElementById('container');\nconst template = {\n  // skip...\n}\nconst font = {\n  serif: {\n    data: await fetch('fonts/serif.ttf').then((res) => res.arrayBuffer()),\n    fallback: true,\n  },\n  sans_serif: {\n    data: await fetch('fonts/sans_serif.ttf').then((res) => res.arrayBuffer()),\n  },\n}\n\nconst designer = new Designer({ domContainer, template, options: { font } });\n")),(0,r.kt)("h4",{id:"update-fonts-with-updateoptions"},"Update fonts with ",(0,r.kt)("inlineCode",{parentName:"h4"},"updateOptions"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const font = {\n  serif: {\n    data: await fetch('fonts/serif.ttf').then((res) => res.arrayBuffer()),\n  },\n  sans_serif: {\n    data: await fetch('fonts/sans_serif.ttf').then((res) => res.arrayBuffer()),\n    fallback: true,\n  },\n}\ndesigner.updateOptions({ font });\n")))}c.isMDXComponent=!0}}]);